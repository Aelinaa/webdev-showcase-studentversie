@model Contactform
@{
    ViewData["Title"] = "Contactpagina";
}

<div class="page">
    <section class="contact">

        <h1>Contact</h1>
        <p>@ViewBag.Message</p>
        <form method="post" class="form-contactpagina">

            <div class="form-contactpagina__inputelement fx-col">
                <label for="firstname">Voornaam </label>
                <input type="text" asp-for="FirstName" name="firstname" id="firstname" required>
            </div>

            <div class="form-contactpagina__inputelement fx-col">
                <label for="lastname">Achternaam </label>
                <input type="text" asp-for="LastName" name="lastname" id="lastname" required>
            </div>

            <div class="form-contactpagina__inputelement fx-col">
                <label for="email">E-mailadres </label>
                <input type="email" asp-for="Email" name="email" id="email">
            </div>

            <div class="form-contactpagina__inputelement fx-col">
                <label for="phone">Telefoonnummer </label>
                <input type="tel" asp-for="Phone" name="phone" id="phone" required>
            </div>

            <div class="form-contactpagina__inputelement">
                <input type="submit" value="Verstuur!">
            </div>

        </form>

    </section>
</div>



<script>

    
   // Validate PhoneNumber
   // const validatePhone = () => { 
   //    const phoneValue = inputPhone.value.trim();
   //    const phonePattern = /^\+?[0-9 ]{8,15}$/;

   //     if (!phonePattern.test(phoneValue)) {
   //      inputPhone.setCustomValidity("Enter a valid phone number (only numbers and spaces, 8-15 digits, optional +).");
   //  } else {
   //      inputPhone.setCustomValidity("");
   //  }

   //  inputPhone.reportValidity();
   // }

const inputEmail = document.getElementById('email');
const form = document.querySelector('.form-contactpagina');

const validateEmail = () => { 
    const maxLength = 80;
    const emailValue = inputEmail.value.trim();

    if (inputEmail.validity.typeMismatch) {
        inputEmail.setCustomValidity("Voer een geldig e-mailadres in!");
    } else if (emailValue.length > maxLength) {
        inputEmail.setCustomValidity("Email mag niet langer dan 80 tekens zijn!");
    } else {
        inputEmail.setCustomValidity(""); // Reset de foutmelding
    }
    
    inputEmail.reportValidity();
};

const validateForm = () => {
    validateEmail();
    return form.checkValidity(); // Controleert of alle velden geldig zijn
};

// Event listeners voor email validatie
inputEmail.addEventListener("blur", validateEmail);
inputEmail.addEventListener("input", validateEmail);

// Event listener voor formulierinzending
form.addEventListener('submit', function (event) {
    event.preventDefault(); // Voorkom standaard formulierinzending

    if (!validateForm()) {
        return; // Stop formulierverwerking als validatie faalt
    }

    // Verkrijg CSRF-token van het formulier
    const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

    // Serialiseer formuliergegevens
    const formData = new URLSearchParams(new FormData(form));


    // Voer een POST-verzoek uit
    fetch('/contact', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Netwerkrespons was niet ok');
        }
        return response.text();
    })
    .then(data => {
        console.log('Formulier succesvol ingediend:', data);
        form.reset(); // Reset het formulier na een succesvolle verzending
    })
    .catch(error => {
        console.error('Er was een probleem met de formulierinzending:', error);
        alert(error.message); // Toon een foutmelding aan de gebruiker
    });
});



</script>
